import { GoogleGenAI, Modality } from "@google/genai";
import { DeviceType } from "../types";

// Utility to convert a data URL to a base64 string and mimeType
function dataUrlToBlob(dataUrl: string): { base64Data: string; mimeType: string } {
  const parts = dataUrl.split(',');
  const mimeType = parts[0].match(/:(.*?);/)?.[1] || 'image/png';
  const base64Data = parts[1];
  return { base64Data, mimeType };
}


export async function generateScreenshotImage(
  base64Screenshot: string,
  device: DeviceType
): Promise<string> {
  try {
    if (!process.env.API_KEY) {
      throw new Error("API_KEY environment variable not set");
    }
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    const { base64Data, mimeType } = dataUrlToBlob(base64Screenshot);

    const prompt = `You are an expert in creating visually stunning and effective App Store screenshots.
Your task is to generate a complete App Store screenshot image based on the provided user's app screen.

**Instructions:**
1.  **Analyze the Screenshot:** Look at the user's uploaded app screen to understand its purpose and key features.
2.  **Choose a Background:** Select a visually appealing background. This could be a solid color, a subtle gradient, or a simple abstract graphic that complements the colors and style of the user's app screenshot. The background should enhance the screenshot, not distract from it.
3.  **Generate ASO Text:** Based on the screenshot, create a compelling, short, and catchy headline and a slightly more descriptive subtitle. These texts should follow App Store Optimization (ASO) best practices.
4.  **Determine Layout:** Intelligently decide on the best placement for the text (headline and subtitle) on the image. It could be at the top or bottom, aligned left, right, or center, depending on what looks best with the phone mockup and the chosen background. The goal is maximum readability and visual impact.
5.  **Create the Final Image:** Composite everything into a single, high-quality image. The final image must include:
    *   The background you chose.
    *   The generated headline and subtitle. The text should be white or another high-contrast color, highly readable, and use a clean, modern sans-serif font.
    *   A photorealistic mockup of a modern ${device === DeviceType.Iphone ? 'iPhone' : 'Android smartphone'}.
    *   The user's app screen perfectly placed inside the screen of the phone mockup.

The final output should be just the generated image, nothing else.`;

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Data,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to generate image: ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the image.");
  }
}

export async function updateScreenshotImage(
  generatedImageToEditDataUrl: string,
  changePrompt: string,
): Promise<string> {
  try {
    if (!process.env.API_KEY) {
      throw new Error("API_KEY environment variable not set");
    }
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    const { base64Data, mimeType } = dataUrlToBlob(generatedImageToEditDataUrl);

    const fullPrompt = `As an expert visual designer, edit the provided App Store screenshot. The user's request is: "${changePrompt}".
    
IMPORTANT:
- Only change what the user has asked for.
- Preserve the phone mockup and the app screen inside it unless specifically asked to change them.
- Output ONLY the final edited image. Do not add any text or commentary.`;

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Data,
              mimeType: mimeType,
            },
          },
          {
            text: fullPrompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    
    throw new Error("No image was generated by the API during the update.");

  } catch (error) {
    console.error("Error updating image with Gemini:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to update image: ${error.message}`);
    }
    throw new Error("An unknown error occurred while updating the image.");
  }
}
